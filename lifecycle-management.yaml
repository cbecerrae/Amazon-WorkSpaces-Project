AWSTemplateFormatVersion: '2010-09-09'
Description: 'This CloudFormation template creates a solution to automate Amazon WorkSpaces instance lifecycle according to the presence of users in an AD OU.'

# Template Parameters
Parameters:

# S3 bucket unique name
  UsersBucketName:
    Type: String
    Description: 'The name of S3 bucket to used store the CSV file containing the user list. Must be an unique name.'
    Default: workspaces-directory-bucket-181017

# Domain Controller or member server instance ID
  AdInstanceID:
    Type: String
    Description: 'The EC2 Instance ID of the Domain Controller or Member Server.'
    Default: i-0d27dfac993edd6b9

# OU path for WorkSpaces users
  UsersOU:
    Type: String
    Description: 'The WorkSpaces users OU path.'
    Default: OU=WorkSpaces,OU=CONTOSO,DC=CONTOSOCORPORATION,DC=LOCAL

# AD Connector or Microsoft AD directory ID
  DirectoryID:
    Type: String
    Description: 'The ID of the AWS Directory Services component.'
    Default: d-9267a45b3b

# WorkSpaces bundle ID
  BundleID:
    Type: String
    Description: 'The ID of the Amazon WorkSpaces Bundle.'
    Default: wsb-93xk71ss4

# Windows drive for PS1 script
  DriveLetter:
    Type: String
    Description: 'The letter of the drive where you want workspaces-users.csv file to be exported in the Domain Controller or Member Server.'
    Default: C

# AWS Account ID:
  AWSAccountId:
    Type: String
    Description: "AWS Account ID used to construct certain ARNs."
    Default: 564102503701

# AWS Region:
  AWSRegion:
    Type: String
    Description: "AWS Region used to configure the SES client."
    Default: us-west-2

# WorkSpace Registration code
  WorkSpaceRegistrationCode:
    Type: String
    Description: "Registration Code necessary for users to log in to the Amazon WorkSpace Client"
    Default: WSpdx+BWB5SY

Resources:

# Create S3 bucket
  UsersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref UsersBucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:Put'
          Function: !GetAtt LambdaCompare.Arn
          Filter:
            S3Key:
              Rules:
                -
                  Name: suffix
                  Value: .csv
    DependsOn:
      - LambdaComparePermission

# Create bucket policy
  UsersBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UsersBucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:sts::${AWSAccountId}:assumed-role/EC2DomainJoin/${AdInstanceID}"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${UsersBucketName}"
              - !Sub "arn:aws:s3:::${UsersBucketName}/*"
    DependsOn:
      - UsersBucket

# Create maintenance window role
  MaintenanceWindowRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: 'ws-automation-window-role'
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ssm.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
        Policies:
          - PolicyName: pass-role
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - iam:PassRole
                  Resource:
                    - '*'

# Create maintenance window
  MaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties:
      Name: 'ws-automation-maintenance-window'
      Schedule: 'cron(0 */5 * ? * *)'
      Duration: 3
      Cutoff: 1
      AllowUnassociatedTargets: true
    DependsOn:
      - MaintenanceWindowRole
      - UsersBucket

# Create maintenance window task
  MaintenanceWindowTask:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Name: 'ws-automation-maintenance-window-task'
      WindowId: !Sub '${MaintenanceWindow}'
      Targets:
        - Key: InstanceIds
          Values:
          - !Ref AdInstanceID
      TaskType: 'RUN_COMMAND'
      ServiceRoleArn: !GetAtt MaintenanceWindowRole.Arn
      TaskArn: 'AWS-RunPowerShellScript'
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          Parameters:
            commands:
            #- !Sub "New-Item -Path ${DriveLetter}:\\workspaces-users -ItemType directory\nGet-ADUser -Filter * -SearchBase '${UsersOU}' -Properties SamAccountname | % {New-Object PSObject -Property @{oSamAccountname= $_.SamAccountname}} | Select oSamAccountname | export-CSV ${DriveLetter}:\\workspaces-users\\workspaces-users1.csv -NoTypeInformation -Encoding UTF8\nGet-Content ${DriveLetter}:\\workspaces-users\\workspaces-users1.csv | select -Skip 1 | Set-Content ${DriveLetter}:\\workspaces-users\\workspaces-users.csv\nWrite-S3Object -BucketName ${UsersBucketName} -File ${DriveLetter}:\\workspaces-users\\workspaces-users.csv"
            - !Sub "New-Item -Path ${DriveLetter}:\\workspaces-users -ItemType directory\nGet-ADUser -Filter * -SearchBase '${UsersOU}' -Properties SamAccountname,EmailAddress |% {New-Object PSObject -Property @{oSamAccountname = $_.SamAccountname; oEmailAddress = $_.EmailAddress}} | Select oSamAccountname, oEmailAddress | export-CSV ${DriveLetter}:\\workspaces-users\\workspaces-users1.csv -NoTypeInformation -Encoding UTF8\nGet-Content ${DriveLetter}:\\workspaces-users\\workspaces-users1.csv | select -Skip 1 | Set-Content ${DriveLetter}:\\workspaces-users\\workspaces-users.csv\nWrite-S3Object -BucketName ${UsersBucketName} -File ${DriveLetter}:\\workspaces-users\\workspaces-users.csv"
            workingDirectory:
            - ""
            executionTimeout:
            - "3600"
      MaxConcurrency: 1
      MaxErrors: 1
      Priority: 10
    DependsOn:
      - MaintenanceWindow

# Create role for Lambda compare function
  LambdaCompareRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'ws-automation-lambda-compare-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

# Create policy and attaches to the role for Lambda compare function
  LambdaCompareRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'ws-automation-lambda-compare-role-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'workspaces:CreateWorkspaces'
              - 'workspaces:TerminateWorkspaces'
              - 'workspaces:DescribeWorkspaces'
            Resource: '*'
          -
            Effect: 'Allow'
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
            Resource: !Sub '${UsersBucket.Arn}/*'
          -
            Effect: 'Allow'
            Action:
              - 'ses:SendEmail'
            Resource: '*'
      Roles:
        - !Ref LambdaCompareRole

# Create Lambda compare function
  LambdaCompare:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'ws-automation-lambda-compare'
      Handler: 'index.lambda_handler'
      Role: !Sub '${LambdaCompareRole.Arn}'
      Code:
        ZipFile:
          "Fn::Sub": |
            import csv
            import logging
            import os
            import boto3
            from botocore.exceptions import NoCredentialsError, PartialCredentialsError

            s3_client = boto3.client('s3')
            ws_client = boto3.client('workspaces')
            ses_client = boto3.client('ses', region_name=os.getenv('REGION'))
            DIRECTORY_ID = os.getenv('DIRECTORY_ID')
            BUNDLE_ID = os.getenv('BUNDLE_ID',)
            RUNNING_MODE = 'AUTO_STOP'
            REGISTRATION_CODE = os.getenv('REGISTRATION_CODE')
            logging.basicConfig(format='%(asctime)s [%(levelname)+8s]%(module)s: %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
            logger = logging.getLogger(__name__)
            logger.setLevel(getattr(logging, os.getenv('LOG_LEVEL', 'INFO')))

            # --- Main handler ---

            def lambda_handler(event, context):
                bucket = event['Records'][0]['s3']['bucket']['name']
                key = event['Records'][0]['s3']['object']['key']

                # Get CSV file from S3 and transform it into JSON
                csv_object = s3_client.get_object(Bucket=bucket, Key=key)
                csv_users = csv.reader(csv_object['Body'].read().decode('utf-8').splitlines())
                ad_users = set()
                ad_users_list = []
                ad_emails_list = []
                for item in csv_users:
                    if len(item) >= 2 and item[1] != '': # Ensure there are at least two elements in the row
                        logger.debug('Adding user: {}'.format(item[0]))
                        ad_users.add(item[0]) # Add the username to the users set
                        ad_users_list.append(item[0]) # Append the username to the users list
                        ad_emails_list.append(item[1]) # Append the email to the emails list
                    else:
                        logger.warning('Skipping row with insufficient data: {}'.format(item))

                # Get current workspaces
                response = ws_client.describe_workspaces()
                workspaces = response['Workspaces']
                current_ws = set()
                for workspace in workspaces:
                    current_ws.add(workspace['UserName'])

                # Function to send email
                def send_email(recipient, username):
                    try:
                        body = f"""
                        <html>
                        <head></head>
                        <body>
                            <p>Dear Amazon WorkSpaces User,</p>
                            <p>A new Amazon Workspace has been provided for you. Follow the steps below to quickly get up and running with your WorkSpace:</p>
                            <ol>
                                <li>Download and install a WorkSpaces Client for your favorite devices: <a href="https://clients.amazonworkspaces.com/">https://clients.amazonworkspaces.com/</a></li>
                                <li>Launch the client and enter the following registration code: <strong>{REGISTRATION_CODE}</strong></li>
                                <li>Login with your password. Your username is <strong>{username}</strong></li>
                            </ol>
                            <p>If you have any Issues connecting to your WorkSpace, please contact your administrator.</p>
                            <p>Sincerely,<br>Amazon WorkSpaces</p>
                        </body>
                        </html>
                        """

                        response = ses_client.send_email(
                            Source='cbecerra@morris-labs.com',  # Use your SES verified email address
                            Destination={
                                'ToAddresses': [recipient],
                            },
                            Message={
                                'Subject': {
                                    'Data': 'Welcome to Amazon WorkSpaces!',
                                    'Charset': 'UTF-8'
                                },
                                'Body': {
                                    'Html': {
                                        'Data': body,
                                        'Charset': 'UTF-8'
                                    }
                                }
                            }
                        )
                        logger.info(f'Email sent to {recipient}: {response}')
                    
                    except NoCredentialsError:
                        logger.error("Credentials not available")
                    except PartialCredentialsError:
                        logger.error("Incomplete credentials")
            
                # If user is present in Ad user list but not in WorkSpaces list, create WorkSpace and send email
                users_to_add = ad_users - current_ws
                logger.debug('Users to add: {}'.format(users_to_add))
                for user in users_to_add:
                    email = next((email for name, email in zip(ad_users_list, ad_emails_list) if name == user), None)
                    try:
                        logger.info('Creating Workspaces for user: {}'.format(user))
                        create_ws = ws_client.create_workspaces(
                            Workspaces=[
                                {
                                    'DirectoryId': DIRECTORY_ID,
                                    'UserName': user,
                                    'BundleId': BUNDLE_ID,
                                    'WorkspaceProperties': {
                                        'RunningMode': RUNNING_MODE,
                                        'RunningModeAutoStopTimeoutInMinutes': 60
                                    }
                                }
                            ]
                        )

                        # Sends the email to the corresponding user
                        if email:
                            logger.info('Sending mail to email: {}'.format(email))
                            send_email(email, user)
                            logger.info('Email sent to user: {}'.format(user))
                        else:
                            logger.warning('No email found for user: {}'.format(user))
                        
                    except Exception as e:
                        logger.error('Unable to Create Workspaces')
                        logger.debug('Error: {}'.format(e))

                # If user is present in WorkSpaces list but not in AD user list, terminate WorkSpace
                ws_to_terminate = current_ws - ad_users
                logger.debug('Workspaces to terminate: {}'.format(ws_to_terminate))
                for user in ws_to_terminate:
                    try:
                        logger.info('Terminating Workspaces for user: {}'.format(user))
                        describe_ws = ws_client.describe_workspaces(DirectoryId=DIRECTORY_ID)
                        for workspace in describe_ws['Workspaces']:
                            if workspace['UserName'] == user:
                                workspace_id = workspace['WorkspaceId']
                                terminate_ws = ws_client.terminate_workspaces(
                            TerminateWorkspaceRequests=[
                                {
                                    'WorkspaceId': workspace_id
                                },
                            ])
                    except Exception as e:
                        logger.error('Error executing describe_workspaces or terminate_workspaces')
                        logger.debug('Error: {}'.format(e))

      Runtime: 'python3.9'
      Timeout: 600
      Environment:
        Variables:
          DIRECTORY_ID: !Ref DirectoryID
          BUNDLE_ID: !Ref BundleID
          REGION: !Ref AWSRegion
          REGISTRATION_CODE: !Ref WorkSpaceRegistrationCode

# Creates the Lambda Compare function permission for the S3 bucket
  LambdaComparePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaCompare
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${UsersBucketName}'

# Resource Outputs
Outputs:

  StackName:
    Description: Stack name.
    Value: !Sub '${AWS::StackName}'

  UsersBucket:
    Description: S3 bucket name.
    Value: !Ref UsersBucket

  UsersBucketPolicy:
    Description: S3 bucket policy.
    Value: !Ref UsersBucketPolicy

  MaintenanceWindowRole:
    Description: Maintenance Window Role name.
    Value: !Ref MaintenanceWindowRole

  MaintenanceWindow:
    Description: Systems Manager Maintenance Window ID.
    Value: !Ref MaintenanceWindow

  MaintenanceWindowTask:
    Description: Maintenance Window Task ID.
    Value: !Ref MaintenanceWindowTask

  LambdaCompareRole:
    Description: Lambda Compare Role name.
    Value: !Ref LambdaCompareRole

  LambdaCompareRolePolicy:
    Description: Lambda Compare Policy ID.
    Value: !Ref LambdaCompareRolePolicy

  LambdaCompare:
    Description: Lambda Compare function name.
    Value: !Ref LambdaCompare